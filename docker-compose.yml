services:
  db:
    image: postgres:15
    container_name: finance-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: finance
      POSTGRES_PASSWORD: finance123
      POSTGRES_DB: finance
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      TZ: ${TZ:-America/Sao_Paulo}
    # Removido mapeamento de porta pública; acesso apenas pela rede interna do Compose
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finance"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: finance-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: finance
      DB_PASSWORD: finance123
      DB_PASS: finance123
      DB_NAME: finance
      JWT_SECRET: ${JWT_SECRET:-}
      TZ: ${TZ:-America/Sao_Paulo}
    # Removido mapeamento de porta pública; Caddy fará o proxy para este serviço
    command: ["sh", "-c", "npm run migrate && npm start"]
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/server-test"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: finance-frontend
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    # Removido mapeamento de porta pública; Caddy expõe a porta 80
    depends_on:
      backend:
        condition: service_healthy

  # Novo reverse proxy frontal
  caddy:
    image: caddy:2-alpine
    container_name: finance-caddy
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./secrets:/etc/caddy/secrets:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy

volumes:
  db_data:
  caddy_data:
  caddy_config:

services:
  db:
    image: postgres:15
    container_name: finance-db
    restart: unless-stopped
    env_file:
      - ./secrets/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-finance}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finance123}
      POSTGRES_DB: ${POSTGRES_DB:-finance}
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      TZ: ${TZ:-America/Sao_Paulo}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: finance-backend
    restart: unless-stopped
    env_file:
      - ./secrets/.env
    environment:
      NODE_ENV: production
      DB_DIALECT: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-finance}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-finance123}
      DB_PASS: ${POSTGRES_PASSWORD:-finance123}
      DB_NAME: ${POSTGRES_DB:-finance}
      JWT_SECRET: ${JWT_SECRET}
      TZ: ${TZ:-America/Sao_Paulo}
    command: ["sh", "-c", "npm run migrate && npm start"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3001/server-test || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: finance-frontend
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Reverse proxy frontal com rate limiting
  caddy:
    image: caddy:2-alpine
    container_name: finance-caddy
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./secrets:/etc/caddy/secrets:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - frontend-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  db_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  backend-network:
    driver: bridge
    internal: true
  frontend-network:
    driver: bridge
